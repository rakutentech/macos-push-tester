---
format_version: '11'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: macos
workflows:

  primary:
    before_run:
    - _setup
    steps:
    - fastlane@3:
        inputs:
        - update_fastlane: 'false'
        - lane: ci
        title: Build & Test
    - script@1:
        title: Export test results
        is_always_run: true
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            # Source: https://devcenter.bitrise.io/testing/exporting-to-test-reports-from-custom-script-steps/

            JUNIT=./artifacts/unit-tests/report.junit
            if [ ! -f "$JUNIT" ]; then
                echo "No JUnit file to export"
                exit 0
            fi
            # Creating the sub-directory for the test run within the BITRISE_TEST_RESULT_DIR:
            test_run_dir="$BITRISE_TEST_RESULT_DIR/result_dir_1"
            mkdir "$test_run_dir"

            # Exporting the JUnit XML test report:
            cp "$JUNIT" "$test_run_dir/UnitTest.xml"

            # Creating the test-info.json file with the name of the test run defined:
            echo '{"test-name":"Tests scheme run"}' >> "$test_run_dir/test-info.json"
    - deploy-to-bitrise-io@2:
        run_if: '{{enveq "BITRISE_GIT_BRANCH" "master"}}'
        inputs:
        - deploy_path: ./artifacts
        - is_compress: 'true'
    - deploy-to-bitrise-io@2:
        title: 'Export test results only'
        run_if: '{{getenv "BITRISE_GIT_BRANCH" | ne "master"}}'
    - cache-push@2:
        inputs:
        - cache_paths: |-
            $BITRISE_CACHE_DIR
            $GEM_CACHE_PATH
        
  _setup:
    steps:
    - git-clone@6:
        inputs:
        - update_submodules: 'no'
        - merge_pr: 'no'
    - cache-pull@2: {}
    - script@1:
        title: Bundle install
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            if [ ! -f "Gemfile" ]; then
                echo "No Gemfile detected. Skipping..."
                exit 0
            fi
            bundle install
            RBENV_DIR="`cd $(rbenv which ruby)/../..;pwd`"
            echo "Gem cache directory: $RBENV_DIR"
            envman add --key GEM_CACHE_PATH --value $RBENV_DIR
    - brew-install@0:
        title: Install swiftlint
        inputs:
        - cache_enabled: 'yes'
        - upgrade: 'no'
        - packages: swiftlint
    - cocoapods-install@1:
        inputs:
        - verbose: 'false'

app:
  envs:
  - opts:
      is_expand: false
    BITRISE_PROJECT_PATH: pusher.xcworkspace
  - opts:
      is_expand: false
    BITRISE_SCHEME: pusher
  - opts:
      is_expand: false
    BITRISE_EXPORT_METHOD: none
